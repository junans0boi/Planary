import { useState, useEffect } from "react";
import Calendar from "react-calendar";
import "react-calendar/dist/Calendar.css";
import "../components/Calendar/Calendar.css";
import AddScheduleModal from "../components/Calendar/AddScheduleModal"; // 일정 추가 모달 컴포넌트
import YearMonthModal from "../components/Calendar/YearMonthSelectModal"; // 
✅ 해석
•	React Hooks
	•	useState: React의 상태 관리 Hook. 값이 변경될 때 자동으로 UI를 업데이트함.
    ✅ 1. useEffect()란?
        • useEffect()는 컴포넌트가 렌더링될 때 특정 작업(부수 효과, Side Effect)을 수행하는 React Hook입니다.
        🚀 사용 이유
	•	공휴일 데이터를 API에서 가져오므로 네트워크 요청(fetch)과 같은 비동기 작업을 처리해야 함.
	•	API 호출을 **한 번만 실행(초기 마운트 시 실행)**하기 위해 의존성 배열을 빈 배열 ([])로 설정.
•	React-Calendar 라이브러리
	•	Calendar: 달력을 표시하는 컴포넌트.
	•	import "react-calendar/dist/Calendar.css": 달력의 기본 스타일 적용.
•	사용자 정의 컴포넌트
	•	AddScheduleModal: 일정 추가 모달 컴포넌트.
	•	YearMonthModal: 연/월 선택을 위한 모달 컴포넌트.
----------------------------------------------------------------------------------------------------------------
function CalendarPage() {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [holidays, setHolidays] = useState({});
  const [displayYear, setDisplayYear] = useState(new Date().getFullYear());
  const [displayMonth, setDisplayMonth] = useState(new Date().getMonth());
  const [activeStartDate, setActiveStartDate] = useState(new Date());
  const [isYearMonthModalOpen, setIsYearMonthModalOpen] = useState(false);
  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);
  const [isDayClick, setIsDayClick] = useState(false);
  const [schedules, setSchedules] = useState({});

✅ 해석
	•	selectedDate: 현재 선택된 날짜를 저장 (new Date()로 초기화).
        •	new Date() : JavaScript의 Date 객체는 날짜 및 시간을 다룰 때 사용하는 내장 객체
        •	현재 날짜와 시간 출력 (예: 2025-02-18T12:34:56.789Z)

	•	holidays: 공휴일 데이터를 저장할 객체 ({} 초기화).
	•	displayYear: 현재 표시되는 연도 (new Date().getFullYear()로 초기화).
        •	new Date() : JavaScript의 Date 객체는 날짜 및 시간을 다룰 때 사용하는 내장 객체
        •	getFullYear() : Date 객체에서 4자리 연도(YYYY)를 반환하는 메서드.
	•	displayMonth: 현재 표시되는 월 (new Date().getMonth()로 초기화, 0~11 범위).
        •	 getMonth() : Date 객체에서 월(month) 값을 반환하는 메서드, 
        •	 월 값은 0부터 시작 (0 = 1월, 11 = 12월) → 항상 +1을 해서 사용해야 함.
	•	activeStartDate: 캘린더가 시작하는 날짜 (현재 연/월의 1일).
    •	activeStartDate :  캘린더에서 현재 표시할 “해당 월의 첫째 날”을 저장하는 상태.
    •	setActiveStartDate : useState()를 사용하여 정의된 상태 변수(activeStartDate)를 업데이트하는 함수.
	•	isYearMonthModalOpen: 연/월 선택 모달의 열림 여부 (false 초기화).
	•	isScheduleModalOpen: 일정 추가 모달의 열림 여부 (false 초기화).
	•	isDayClick: true면 날짜를 클릭하여 일정 추가, false면 플로팅 버튼을 클릭하여 일정 추가.
	•	schedules: 날짜별 일정 데이터를 저장할 객체.
----------------------------------------------------------------------------------------------------------------
  // displayYear, displayMonth 변경 시 달력 표시
  useEffect(() => {
    setActiveStartDate(new Date(displayYear, displayMonth, 1));
  }, [displayYear, displayMonth]);

✅ 해석
useEffect()란?
	•	useEffect()는 React의 Hook 중 하나로, 컴포넌트가 렌더링될 때 특정 작업(부수 효과, Side Effect)을 실행할 수 있도록 도와줍니다.
    •	setActiveStartDate : useState()를 사용하여 정의된 상태 변수(activeStartDate)를 업데이트하는 함수.
	•	activeStartDate는 캘린더에서 현재 표시할 “해당 월의 첫째 날”을 저장하는 상태.
	•	displayYear 또는 displayMonth가 변경될 때마다 캘린더의 activeStartDate를 업데이트.
	•	new Date(displayYear, displayMonth, 1): 해당 연/월의 첫째 날을 설정.
----------------------------------------------------------------------------------------------------------------
  // 공휴일 가져오기
  useEffect(() => {
    const fetchHolidays = async () => {
      const year = new Date().getFullYear();
      let fetchedHolidays = {};

      for (let month = 1; month <= 12; month++) {
        try {
          const response = await fetch(
            `http://localhost:5006/api/holidays?year=${year}&month=${month}`
          );
          const data = await response.json();
          const holidaysArray = Array.isArray(data) ? data : data ? [data] : [];
          holidaysArray.forEach((holiday) => {
            const dateStr = holiday.locdate.toString();
            const dateKey = `${dateStr.substring(0, 4)}-${dateStr.substring(4, 6)}-${dateStr.substring(6, 8)}`;
            fetchedHolidays[dateKey] = holiday.dateName;
          });
        } catch (error) {
          console.error("Error fetching holidays:", error);
        }
      }
      setHolidays(fetchedHolidays);
    };
    fetchHolidays();
  }, []);

✅ 해석
    useEffect(() => { fetchHolidays(); }, []) : 컴포넌트 마운트 시 공휴일 데이터 가져오기
    fetch() : API 호출 (비동기)
    response.json() : JSON 데이터 변환
    holidaysArray.forEach() : 공휴일 데이터를 { "YYYY-MM-DD": "공휴일명" } 형식으로 변환
    setHolidays(fetchedHolidays) : 상태 업데이트 (UI 반영)

    •	공휴일 데이터를 가져오는 API 호출 (fetchHolidays 함수).
    •	fetch(): REST API에서 공휴일 데이터를 가져옴.
    •	응답 데이터 처리
    •	data가 배열이면 그대로 사용.
    •	배열이 아닐 경우, 단일 객체를 배열로 변환하여 처리.
    •	날짜 문자열을 변환하여 holidays 객체에 { "YYYY-MM-DD": "공휴일 이름" } 형태로 저장.

----------------------------------------------------------------------------------------------------------------
  // 년/월 선택 모달
  const openYearMonthModal = () => setIsYearMonthModalOpen(true);
  const closeYearMonthModal = () => setIsYearMonthModalOpen(false);
  const handleYearMonthSelect = (year, month) => {
    setDisplayYear(year);
    setDisplayMonth(month-1);
  };
✅ 해석
  	•	openYearMonthModal(): 연/월 선택 모달을 염.
	•	closeYearMonthModal(): 연/월 선택 모달을 닫음.
	•	handleYearMonthSelect(year, month): 선택된 연/월을 반영. (month - 1을 통해 0부터 시작하는 월 값으로 변환)

----------------------------------------------------------------------------------------------------------------
  // 일정 추가 모달 열기
  // (1) 달력 날짜 클릭 → 해당 날짜 00:00~23:59
  const handleDayClick = (date) => {
    setSelectedDate(date);
    setIsDayClick(true);   // 달력 날짜 클릭
    setIsScheduleModalOpen(true);
  };

  // (2) 플로팅 버튼 클릭 → 오늘 날짜 00:00~23:59
  const openScheduleModal = () => {
    setSelectedDate(new Date());
    setIsDayClick(false);  // 플로팅 버튼 클릭
    setIsScheduleModalOpen(true);
  };

  // 일정 모달 닫기
  const closeScheduleModal = () => setIsScheduleModalOpen(false);

✅ 해석
	•	handleDayClick(date): 달력을 클릭하면 해당 날짜에 대한 일정 추가 모달을 열음.
	•	openScheduleModal(): 플로팅 버튼 클릭 시 오늘 날짜의 일정 추가 모달을 열음.
	•	closeScheduleModal(): 일정 추가 모달을 닫음.
----------------------------------------------------------------------------------------------------------------
  /**
   * (중요) 일정 저장 로직
   * => startTime ~ endTime 범위의 모든 날짜에 스케줄을 등록
   */
  const handleScheduleSave = (schedule) => {
    console.log("저장된 일정:", schedule);

    // 새 schedules 객체를 만들고,
    const newSchedules = { ...schedules };

    const start = new Date(schedule.startTime);
    const end = new Date(schedule.endTime);

    // 날짜 반복문 (start <= end)
    let current = new Date(start);
    while (current <= end) {
      const dateKey = current.toISOString().split("T")[0];
      // 해당 날짜에 이미 일정이 있으면 배열에 추가, 없으면 새로 생성
      if (!newSchedules[dateKey]) {
        newSchedules[dateKey] = [schedule];
      } else {
        newSchedules[dateKey].push(schedule);
      }
      // 하루씩 증가
      current.setDate(current.getDate() + 1);
    }

    setSchedules(newSchedules);
  };

  return (
    <div className="calendar-container">
      {/* 상단 헤더 */}
      <div
        className="calendar-header"
        onClick={openYearMonthModal}
        style={{ cursor: "pointer", textAlign: "left" }}
      >
        <h2>
          {displayYear}년 {displayMonth + 1}월
        </h2>
      </div>

      {/* 연/월 선택 모달 */}
      {isYearMonthModalOpen && (
        <YearMonthModal
          currentYear={displayYear}
          currentMonth={displayMonth}
          onClose={closeYearMonthModal}
          onSelect={handleYearMonthSelect}
        />
      )}

      {/* 일정 추가 모달 */}
      {isScheduleModalOpen && (
        <AddScheduleModal
          onClose={closeScheduleModal}
          onSave={handleScheduleSave}
          selectedDate={selectedDate}
          isDayClick={isDayClick} // 달력 클릭 or 플로팅 버튼 클릭 여부
        />
      )}

      {/* 달력 */}
      <Calendar
        onChange={setSelectedDate}
        value={selectedDate}
        calendarType="gregory"
        view="month"
        navigationLabel={null}
        prevLabel={null}
        nextLabel={null}
        prev2Label={null}
        next2Label={null}
        showNeighboringMonth={true}
        activeStartDate={activeStartDate}
        onActiveStartDateChange={({ activeStartDate }) =>
          setActiveStartDate(activeStartDate)
        }
        formatDay={(locale, date) => date.getDate().toString()}
        tileClassName={({ date, view }) => {
          if (view === "month") {
            const dateString = date.toISOString().split("T")[0];
            const day = date.getDay();

            // 이웃 월
            if (date.getMonth() !== activeStartDate.getMonth()) {
              return "neighboring-month";
            }
            // 일요일
            if (day === 0) return "sunday";
            // 토요일
            if (day === 6) return "saturday";
            // 공휴일
            if (holidays[dateString]) return "holiday";
          }
          return null;
        }}
        tileContent={({ date, view }) => {
          if (view === "month") {
            const dateString = date.toISOString().split("T")[0];
            const daySchedules = schedules[dateString] || [];

            return (
              <>
                {/* 공휴일 라벨 */}
                {holidays[dateString] && (
                  <span className="holiday-tooltip">
                    {holidays[dateString]}
                  </span>
                )}
                {/* 일정 라벨 (다중 날짜 지원) */}
                {daySchedules.map((sch, idx) => (
                  <div key={idx} className="schedule-label">
                    {sch.title}
                  </div>
                ))}
              </>
            );
          }
          return null;
        }}
        onClickDay={handleDayClick}
      />

      {/* 선택된 날짜 표시 (테스트용) */}
      <p className="selected-date">선택한 날짜: {selectedDate.toDateString()}</p>

      {/* 우측 하단 플로팅 버튼 */}
      <button className="floating-btn" onClick={openScheduleModal}>
        +
      </button>
    </div>
  );
}

export default CalendarPage;